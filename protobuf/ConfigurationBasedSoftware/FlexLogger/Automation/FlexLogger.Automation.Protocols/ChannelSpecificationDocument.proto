syntax = "proto3";

package national_instruments.flex_logger.automation.protocols;

import "ConfigurationBasedSoftware/FlexLogger/Automation/FlexLogger.Automation.Protocols/DataRateLevel.proto";
import "DiagramSdk/Automation/DiagramSdk.Automation.Protocols/Identifiers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Service interface for a server side channel specification document.
service ChannelSpecificationDocument {
    // RPC call to get all channel names
    rpc GetChannelNames(GetChannelNamesRequest) returns (GetChannelNamesResponse) {}
    // RPC call to get the latest value of a double channel
    rpc GetDoubleChannelValue(GetDoubleChannelValueRequest) returns (GetDoubleChannelValueResponse) {}
    // RPC call to set the value of a double channel
    rpc SetDoubleChannelValue(SetDoubleChannelValueRequest) returns (SetDoubleChannelValueResponse) {}
    // RPC call to get a channel's enable state
    rpc IsChannelEnabled(IsChannelEnabledRequest) returns (IsChannelEnabledResponse) {}
    // RPC call to enable/disable channels
    rpc SetChannelEnabled(SetChannelEnabledRequest) returns (SetChannelEnabledResponse) {}
    // RPC call to get the data rate for a specific data rate level
    rpc GetDataRate(GetDataRateRequest) returns (GetDataRateResponse) {}
    // RPC call to set the data rate of a specific data rate level
    rpc SetDataRate(SetDataRateRequest) returns (google.protobuf.Empty) {}
    // RPC call to get the data rate level of the subsystem that owns a channel
    rpc GetDataRateLevel(GetDataRateLevelRequest) returns (GetDataRateLevelResponse) {}
    // RPC call to set the data rate level of the subsystem that owns a channel
    rpc SetDataRateLevel(SetDataRateLevelRequest) returns (google.protobuf.Empty) {}
    // RPC call to get the actual data rate of the subsystem that owns a channel
    rpc GetActualDataRate(GetActualDataRateRequest) returns (GetActualDataRateResponse) {}
}

// Request object for getting all channel names
message GetChannelNamesRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
}

// Response object for getting all channel names
message GetChannelNamesResponse {
    // The channels defined in the channel specification. Can be empty.
    repeated string channel_names = 1;
}

// Request object for getting a channel value
message GetDoubleChannelValueRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The name of the channel to get a double value for
    string channel_name = 2;
}

// Response object for getting a channel value
message GetDoubleChannelValueResponse {
    // The timestamp indicating when the channel value occurred
    google.protobuf.Timestamp value_timestamp = 1;
    // The value of the channel at the timestamp
    double channel_value = 2;
}

// Request object for setting a channel value
message SetDoubleChannelValueRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The name of the channel to get a double value for
    string channel_name = 2;
    // The value of the channel at the timestamp
    double channel_value = 3;
}

// Response object for setting a channel value
message SetDoubleChannelValueResponse {
}

// Request object for getting a channel enable state
message IsChannelEnabledRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The name of the channel to get the enable state for
    string channel_name = 2;
}

// Response object for getting a channel enable state
message IsChannelEnabledResponse {
    bool channel_enabled = 1;
}

// Request object for setting a channel enable state
message SetChannelEnabledRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The name of the channel to enable or disable
    string channel_name = 2;
    // The enable state to set
    bool channel_enabled = 3;
}

// Response object for setting a channel enable state
message SetChannelEnabledResponse {
}

// Request object for getting the data rate
message GetDataRateRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The data rate level (Slow, Medium, Fast, Counter, Digital, OnDemand)
    DataRateLevel data_rate_level = 2;
}

// Response object for getting the data rate
message GetDataRateResponse {
    // The value of the data rate
    double data_rate = 1;
}

// Request object for setting the data rate
message SetDataRateRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The data rate level (Slow, Medium, Fast, Counter, Digital, OnDemand)
    DataRateLevel data_rate_level = 2;
    // The value of the data rate to set
    double data_rate = 3;
}

// Request object for getting the data rate of a specific channel
message GetDataRateLevelRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The name of the channel in the subsystem to set the data rate to
    string channel_name = 2;
}

// Response object for getting the data rate of a specific channel
message GetDataRateLevelResponse {
    // The data rate level
    DataRateLevel data_rate_level = 1;
}

// Request object for setting the data rate level of a specific channel
message SetDataRateLevelRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The name of the channel in the subsystem to set the data rate to
    string channel_name = 2;
    // The data rate level to set
    DataRateLevel data_rate_level = 3;
}

// Request object for getting the actual data rate of a specific channel
message GetActualDataRateRequest {
    // The id for the channel specification document
    national_instruments.diagram_sdk.automation.protocols.ElementIdentifier document_identifier = 1;
    // The name of the channel in the subsystem to set the data rate to
    string channel_name = 2;
}

// Response object for getting the actual data rate of a specific channel
message GetActualDataRateResponse {
    // The data rate
    double data_rate = 1;
}
